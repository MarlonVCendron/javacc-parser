options {
  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
  UNICODE_INPUT=true;
  JAVA_UNICODE_ESCAPE = true;
  static = false;
}

PARSER_BEGIN(Lang)

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class Lang {
  public static void main(String args[]) throws ParseException{
    try{
      System.out.println("Lendo arquivo fonte");
      FileInputStream fis = new FileInputStream(new File("fonte.txt"));
      Lang parser = new Lang(fis);
      parser.Start();
      System.out.println("üéâüéâüéâ‚≠êÔ∏è‚≠êÔ∏è‚ú®‚ú®Arquivo fonte processado com sucesso");
    } catch (IOException e) {
      System.out.println("Erro");
      System.exit(0);
    }
  }
}

PARSER_END(Lang)

<*> SKIP: {
  <" " | "\t" | "\r" | "\n" | "\r\n"> |
  <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |
  <"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

TOKEN : {
  <WS : " " | "\t"> |
  <EOL : ";"> |
  <SBOOLEAN_OP : "<" | ">" | "==" | "<=" | ">=" | "!="> |
  <MBOOLEAN_OP : "&&" | "||"> |
  <ARITH_OP : "+" | "-" | "*" | "/" | "%" | "^">
}

TOKEN : {
  <IF : "if"> |
  <ELSE : "else"> |
  <ELSEIF : "elseif"> |
  <FOR : "for"> |
  <SCAN : "scan"> |
  <PRINT : "print"> |
  <RETURN : "return"> |
  <FUNC : "func">
}

TOKEN : {
  <TYPE : (<INT> | <FLOAT> | <DOUBLE> | <STRING> | <BOOL>)> |
  <#INT : "int"> |
  <#FLOAT : "float"> |
  <#DOUBLE : "double"> |
  <#STRING : "string"> |
  <#BOOL : "bool">
}

TOKEN : {
  <#DIGIT : ["0"-"9"]> |
  <#INTEGER : (<DIGIT>)+> |
  <#BOOLEAN : ("true" | "false")> |
  <#START_CHAR:     ~["\u0000"-"\u001F", "\"", "\\", "*", "/", ",", " ", "=", ";", "0"-"9"]> |
  <#CONTINUE_CHAR : ~["\u0000"-"\u001F", "\"", "\\", "*", "/", ",", " ", "=", ";"]> |
  <#UCHAR : ~["\u0000"-"\u001F", "\"", "\\"]>
}

void IDR() : {} {
  <LITERAL>(LOOKAHEAD(2) ","<LITERAL>)*
} 

void IDIR() : {} {
  (LOOKAHEAD(2) Expression() | <LITERAL>)(LOOKAHEAD(4) ","<LITERAL>"="(LOOKAHEAD(2) Expression() | <LITERAL>))*
} 

void ID() : {} {
  <TYPE> <LITERAL> (","IDR() | "="IDIR())*<EOL>
} 

TOKEN : {
  <VALUE : 
    <BOOLEAN> |
    <NUMBER> |
    "null" |
    "\""(<UCHAR>)*"\""
  > |
  <#NUMBER : <INTEGER>("."<INTEGER>)?>
}

TOKEN : {
  <LITERAL : <START_CHAR>(<CONTINUE_CHAR>)*>
  //<Expression : <booleanExpression> | <arithExpression>> |
  //<booleanExpression : (<LITERAL> | <VALUE>) (<WS>)* <SBOOLEAN_OP> (<WS>)* (<LITERAL> | <VALUE>)> |
  //<arithExpression : (<LITERAL> | <NUMBER>) (<WS>)* (<ARITH_OP> (<WS>)* (<LITERAL> | <NUMBER>))*>
}

void Expression(): {} {
  LOOKAHEAD(2) BooleanExpression() | ArithExpression()
} 
void BooleanExpression(): {} {
  (<LITERAL> | <VALUE>) (<WS>)* <SBOOLEAN_OP> (<WS>)* (<LITERAL> | <VALUE>)
} 

void ArithExpression (): {} {
  (<LITERAL> | <VALUE>) (<WS>)* (<ARITH_OP> (<WS>)* (<LITERAL> | <VALUE>))*
} 

void ASSIGNMENT(): {} {
  <LITERAL>"="(LOOKAHEAD(2) Expression() | <LITERAL>)<EOL>
} 

//void FOR() : {} {
//  "for(" <Expression> ";" <Expression> ";" <Expression> "){" <??CODIGO??> "}"
//}

//void ifElseStatement(): {} {
//  < IF > BooleanStructure() < THEN >
//  (
//    statement ()
//  )*
//  (
//    < ELSEIF > BooleanStructure() < THEN >
//    (
//      statement ()
//    )*
//  )*
//    < ELSE >
//    (
//      statement ()
//    )*
//
//  < ENDIF >
//}

void Start() : {} {
  (ID() | ASSIGNMENT())*
  <EOF>
} 




