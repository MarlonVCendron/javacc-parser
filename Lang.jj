options {
  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
  UNICODE_INPUT=true;
  JAVA_UNICODE_ESCAPE = true;
  static = false;
}

PARSER_BEGIN(Lang)

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class Lang {
  public static void main(String args[]) throws ParseException{
    try{
      System.out.println("Lendo arquivo fonte");
      FileInputStream fis = new FileInputStream(new File("fonte.txt"));
      Lang parser = new Lang(fis);
      parser.Start();
      System.out.println("⭐️⭐️⭐️✨✨Arquivo fonte processado com sucesso✨✨⭐️⭐️⭐️");
    } catch (IOException e) {
      System.out.println("Erro");
      System.exit(0);
    }
  }
}

PARSER_END(Lang)

<*> SKIP: {
  <SKIP_CHAR: " " | "\t" | "\r" | "\n" | "\r\n"> |
  <SL_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> |
  <ML_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

TOKEN : {
  <WS : " " | "\t"> |
  <EOL : ";"> |
  <BOOLEAN_OP : "<" | ">" | "==" | "<=" | ">=" | "!=" | "&&" | "||"> |
  <ARITH_OP : "+" | "-" | "*" | "/" | "%" | "^" | "%">
}

TOKEN : {
  <IF : "if"> |
  <ELSE : "else"> |
  <ELSEIF : "elseif"> |
  <FOR : "for"> |
  <WHILE : "while"> |
  <BREAK : "break"> |
  <CONTINUE: "continue"> |
  <SCAN : "scan"> |
  <PRINT : "print"> |
  <RETURN : "return"> |
  <FUNC : "func"> |
  <INCLUDE : "#include">
}

TOKEN : {
  <TYPE : (<INT> | <FLOAT> | <DOUBLE> | <STRING> | <BOOL>)> |
  <#INT : "int"> |
  <#FLOAT : "float"> |
  <#DOUBLE : "double"> |
  <#STRING : "string"> |
  <#BOOL : "bool">
}

TOKEN : {
  <#DIGIT : ["0"-"9"]> |
  <#START_CHAR:     ~["\u0000"-"\u001F", "\"", "\\", "<", ">", "!", "&", "|", "(", ")", "{", "}", "+", "-", "*", "/", "^", "%", "#", ",", " ", "=", ";", "0"-"9"]> |
  <#CONTINUE_CHAR : ~["\u0000"-"\u001F", "\"", "\\", "<", ">", "!", "&", "|", "(", ")", "{", "}", "+", "-", "*", "/", "^", "%", "#", ",", " ", "=", ";"]> |
  <#UCHAR : ~["\u0000"-"\u001F", "\"", "\\"]>
}

TOKEN : {
  <STRING_LITERAL : "\"" (<UCHAR>)* "\""> |
  <BOOLEAN : ("true" | "false")> |
  <INTEGER : (<DIGIT>)+> |
  <NUMBER : <INTEGER>("."<INTEGER>)?>
}

void Value() : {} {
  <BOOLEAN> | <INTEGER> | <NUMBER> | <STRING_LITERAL> | "null"
}

TOKEN : {
  <LITERAL : <START_CHAR>(<CONTINUE_CHAR>)*> |
  <INCREMENT : <LITERAL>"++"> |
  <DECREMENT : <LITERAL>"--">
}

void IDR() : {} {
  <LITERAL>(LOOKAHEAD(2) ","<LITERAL>)*
} 

void IDIR() : {} {
  (LOOKAHEAD(2) Expression() | LOOKAHEAD(2) Function() | <LITERAL>)
  (LOOKAHEAD(4) ","<LITERAL>"="(LOOKAHEAD(2) Expression() | LOOKAHEAD(2) Function() | <LITERAL>))*
} 

void ID() : {} {
  <TYPE> <LITERAL> (","IDR() | "="IDIR())*
} 

void Expression(): {} {
  LOOKAHEAD(2) BooleanExpression() | ArithExpression()
} 
void BooleanExpression(): {} {
  (<LITERAL> | Value()) <BOOLEAN_OP> (<LITERAL> | Value())
} 

void ArithExpression (): {} {
  (<LITERAL> | Value()) (<ARITH_OP> (<LITERAL> | Value()))*
} 

void Assignment(): {} {
  <LITERAL> (<ARITH_OP>)? "="Expression()
} 

void For() : {} {
  <FOR>"(" (ID())? <EOL> (BooleanExpression())? <EOL> (Assignment() | <INCREMENT> | <DECREMENT>)? ")" "{"
    (Statement())*
  "}"
}

void While() : {} {
  <WHILE>"("(BooleanExpression())?")" "{"
    (Statement())*
  "}"
}

void ParametersDefinition() : {} {
  <TYPE> <LITERAL> ("," <TYPE> <LITERAL> ("=" Expression())?)*
}

void FunctionDefinition() : {} {
  <FUNC> <LITERAL> "(" (ParametersDefinition())? ")" "{"
    (Statement())*
  "}"
}

void Parameters() : {} {
  (LOOKAHEAD(2) <LITERAL>"=")? Expression() ("," Parameters())?
}

void FunctionName() : {} {
  <LITERAL> | <SCAN> | <PRINT>
}

void Function() : {} {
  FunctionName() "(" (Parameters())? ")"
}

void Return() : {} {
  <RETURN> (Expression())? <EOL>
}

void Import() : {} {
  <INCLUDE> <STRING_LITERAL> <EOL>
}

void IfElse() : {} {
  <IF> "(" BooleanExpression() ")" "{"
    (Statement())*
  "}"
  (
    <ELSEIF> "(" BooleanExpression() ")" "{"
      (Statement())*
    "}"
  )*
  (
    <ELSE> "{"
      (Statement())*
    "}"
  )?
}

void Statement() : {} {
  LOOKAHEAD(2)
  Assignment()<EOL> |
  Function() <EOL> |
  ID()<EOL> |
  For() |
  IfElse() |
  While() |
  FunctionDefinition() |
  Return() |
  Import() |
  <INCREMENT><EOL> |
  <DECREMENT><EOL> |
  <BREAK><EOL> |
  <CONTINUE><EOL>
}

void Start() : {} {
  (Statement())*
  <EOF>
} 

